"use strict";

// combine-files.js
// const fs = require('fs');
// const path = require('path');
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

// –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º ES –º–æ–¥—É–ª–∏, –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
const outputFile = path.join(__dirname, "combined-files.md");

// –ú–∞—Å—Å–∏–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const additionalFiles = [
  "index.html",
  // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤
const generateFileTree = (dir, prefix = "") => {
  let tree = "";
  const items = fs.readdirSync(dir, { withFileTypes: true }).sort((a, b) => {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–µ—Ä–≤—ã–º–∏
    if (a.isDirectory() && !b.isDirectory()) return -1;
    if (!a.isDirectory() && b.isDirectory()) return 1;
    return a.name.localeCompare(b.name);
  });

  items.forEach((item, index) => {
    if (
      item.name === "node_modules" ||
      item.name === ".git" ||
      item.name === "dist"
    )
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ .git

    const isLast = index === items.length - 1;
    const pointer = isLast ? "‚îî‚îÄ‚îÄ " : "‚îú‚îÄ‚îÄ ";
    tree += `${prefix}${pointer}${item.name}\n`;

    if (item.isDirectory()) {
      const newPrefix = prefix + (isLast ? "    " : "‚îÇ   ");
      tree += generateFileTree(path.join(dir, item.name), newPrefix);
    }
  });

  return tree;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–æ–¥–æ–≤—ã–º –±–ª–æ–∫–æ–º
const addFile = (filePath) => {
  try {
    const relativePath = path.relative(__dirname, filePath);
    const fileName = path.basename(filePath);
    fs.appendFileSync(outputFile, `## ${relativePath}\n\n`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –∫–æ–¥–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
    const ext = path.extname(fileName).toLowerCase();
    let lang = "";
    if ([".ts", ".tsx"].includes(ext)) lang = "typescript";
    else if ([".js", ".jsx"].includes(ext)) lang = "javascript";
    else if (ext === ".css") lang = "css";
    else if (ext === ".json") lang = "json";
    else if (ext === ".html") lang = "html"; // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ .html
    else lang = ""; // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤

    if (lang) {
      fs.appendFileSync(outputFile, `\`\`\`${lang}\n`);
    } else {
      fs.appendFileSync(outputFile, "```\n");
    }

    const content = fs.readFileSync(filePath, "utf-8");
    fs.appendFileSync(outputFile, `${content}\n\`\`\`\n\n`);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
    fs.appendFileSync(
      outputFile,
      `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ **${filePath}**.\n\n`
    );
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –≤—Å–µ—Ö .ts, .tsx, .css —Ñ–∞–π–ª–æ–≤
const collectFiles = (dir, collectedFiles = []) => {
  const items = fs.readdirSync(dir, { withFileTypes: true });
  items.forEach((item) => {
    if (
      item.name === "codewr.js" ||
      item.name === "node_modules" ||
      item.name === ".git" ||
      item.name === "dist"
    )
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ .git
    const fullPath = path.join(dir, item.name);
    if (item.isDirectory()) {
      collectFiles(fullPath, collectedFiles);
    } else {
      const ext = path.extname(item.name).toLowerCase();
      if ([".ts", ".tsx", ".js", ".jsx", ".css"].includes(ext)) {
        collectedFiles.push(fullPath);
      }
    }
  });
  return collectedFiles;
};

// –û—á–∏—Å—Ç–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
try {
  fs.writeFileSync(outputFile, "");
} catch (error) {
  console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª ${outputFile}:`, error);
  process.exit(1);
}

console.log("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...");

try {
  // 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
  const fileTree = generateFileTree(__dirname);
  fs.appendFileSync(
    outputFile,
    `# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞\n\n\`\`\`plaintext\n${fileTree}\n\`\`\`\n\n`
  );
} catch (error) {
  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤:", error);
  fs.appendFileSync(
    outputFile,
    `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞.\n\n`
  );
}

try {
  // 2. –°–±–æ—Ä –≤—Å–µ—Ö .ts, .tsx, .css —Ñ–∞–π–ª–æ–≤
  const collectedFiles = collectFiles(__dirname);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  fs.appendFileSync(outputFile, `# –§–∞–π–ª—ã .ts, .tsx, .css\n\n`);
  collectedFiles.forEach((file) => {
    addFile(file);
  });
} catch (error) {
  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Ñ–∞–π–ª–æ–≤ .ts, .tsx, .css:", error);
  fs.appendFileSync(
    outputFile,
    `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Ñ–∞–π–ª–æ–≤ .ts, .tsx, .css.\n\n`
  );
}

try {
  // 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  if (additionalFiles.length > 0) {
    fs.appendFileSync(outputFile, `# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n`);
    additionalFiles.forEach((file) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤ src/ –∏–ª–∏ –≤ –∫–æ—Ä–Ω–µ
      let fullPath = path.join(__dirname, "src", file);
      if (!fs.existsSync(fullPath)) {
        fullPath = path.join(__dirname, file);
      }

      if (fs.existsSync(fullPath)) {
        console.log(`üìÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${fullPath}`);
        addFile(fullPath);
      } else {
        console.warn(`‚ö†Ô∏è –§–∞–π–ª **${file}** –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–æ–ø—É—â–µ–Ω.`);
        fs.appendFileSync(
          outputFile,
          `‚ö†Ô∏è –§–∞–π–ª **${file}** –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–æ–ø—É—â–µ–Ω.\n\n`
        );
      }
    });
  }
} catch (error) {
  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:", error);
  fs.appendFileSync(
    outputFile,
    `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.\n\n`
  );
}

console.log(`‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ ${outputFile}.`);
